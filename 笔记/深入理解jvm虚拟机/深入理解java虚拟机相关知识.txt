GC管理的主要区域是java堆，一般情况下只针对堆进行垃圾回收。方法区、栈和本地方法区不被GC所管理，因而选择这些区域内的对象作为GC roots，被GC roots引用的对象不被回收

GC Root
常说的GC roots特指的是垃圾收集器的对象GC收集那些不是GC roots且没有被GC roots引用的对象。一个对象可以属于多个root，GC root有以下几种
1. Class——由系统类加载器加载的对象，这些类是不能被回收的，他们可以以静态字段的方式保存其他持有对象。通过用户自定义的类加载器加载的类，除非响应的java.lang.Class实例以其他的某种（或多种）方式成为roots，否则他们不是roots。
2. Thread——活着的线程
3. Stack Local——java方法的local变量或参数
4. JNI Local——JNI方法的local变量或参数
5. JNI Global——全局JNI引用
6. Monitor Used——用于同步的监控对象
7. Held by JVM——用于JVM特殊目的由GC保留的对象。可能已知的一些类型是：系统类加载器、依稀JVM知道的重要的异常类、一些用于异常处理的预分配对象以及一些自定义的类加载器。
	然而，JVM并没有为这些对象提供其他的信息，因此需要去确认哪些是属于“JVM持有”的了

图示：强引用、软引用、弱引用、虚引用关系图.png
强引用：
String str = “abc”;
list.add(str);
软引用：
如果弱引用对象回收完之后，内存还是报警，继续回收软引用对象
弱引用：
如果虚引用对象回收完之后，内存还是报警，继续回收弱引用对象
虚引用：
虚拟机的内存不够使用，开始报警，这时候垃圾回收机制开始执行System.gc(); String s = “abc”;如果没有对象回收了， 就回收没虚引用的对象




JNI java native interface的缩写

Minor GC、Major GC和Full GC之间的区别

Minor GC:从年轻代中回收内存。不会影响到永久代。

当发生Minor GC事件的时候，有一些有趣的地方需要注意到：
1. 当 JVM 无法为一个新的对象分配空间时会触发 Minor GC，比如当 Eden 区满了。所以分配率越高，越频繁执行 Minor GC。
2. 内存池被填满的时候，其中的内容全部会被复制，指针会从0开始跟踪空闲内存。Eden 和 Survivor 区进行了标记和复制操作，取代了经典的标记、扫描、压缩、清理操作。所以 Eden 和 Survivor 区不存在内存碎片。写指针总是停留在所使用内存池的顶部。
3. 执行 Minor GC 操作时，不会影响到永久代。从永久代到年轻代的引用被当成 GC roots，从年轻代到永久代的引用在标记阶段被直接忽略掉。
4. 质疑常规的认知，所有的 Minor GC 都会触发“全世界的暂停（stop-the-world）”，停止应用程序的线程。对于大部分应用程序，停顿导致的延迟都是可以忽略不计的。其中的真相就 是，大部分 Eden 区中的对象都能被认为是垃圾，永远也不会被复制到 Survivor 区或者老年代空间。如果正好相反，Eden 区大部分新生对象不符合 GC 条件，Minor GC 执行时暂停的时间将会长很多。




所以 Minor GC 的情况就相当清楚了——每次 Minor GC 会清理年轻代的内存。

Major GC vs Full GC

Major GC 是清理永久代。
Full GC 是清理整个堆空间—包括年轻代和永久代。

最初的标记阶段，这个阶段会暂停“全世界（ stop-the-world）”的事件，停止所有应用程序的线程，然后开始标记。
并行执行标记和清洗阶段。这些都是和应用程序线程并行的。
最后 Remark 阶段，这个阶段会再次暂停所有的事件。
并行执行清理操作。正如其名，此阶段也是并行的，不会停止其他线程。

操作数栈：
操作数栈和局部变量表在访问方式上存在着较大差异，操作数栈并非采用访问索引的方式来进行数据访问的，而是通过标准的入栈和出栈操作来完成一次数据访问。每一个操作数栈都会拥有一个明确的栈深度用于存储数值，
一个32bit的数值可以用一个单位的栈深度来存储，而2个单位的栈深度则可以保存一个64bit的数值，当然操作数栈所需的容量大小在编译期就可以被完全确定下来，并保存在方法的Code属性中。
HotSpot中任何的操作都需要经过入栈和出栈来完成，因此操作数栈就是JVM执行引擎的一个工作区，当一个方法被调用的时候，一个新的栈帧也会随之被创建出来，但这个时候栈帧中的操作数栈却是空的，
只有方法在执行的过程中，才会有各种各样的字节码指令往操作数栈中执行入栈和出栈操作。
比如在一个方法内部需要执行一个简单的加法运算时，首先需要从操作数栈中将需要执行运算的两个数值出栈，待运算执行完成后，再将运算结果入栈。如下所示：

public void testAddOperation();  
	Code:  
	  0: bipush        15  
	  2: istore_1  
	  3: bipush        8  
	  5: istore_2  
	  6: iload_1  
	  7: iload_2  
	  8: iadd  
	  9: istore_3  
	  10: return 
在上述字节码指令示例中，首先会由“bipush”指令将数值15从byte类型转换为int类型后压入操作数栈的栈顶（对于byte、short和char类型的值在入栈之前，会被转换为int类型），当成功入栈之后，
“istore_1”指令便会负责将栈顶元素出栈并存储在局部变量表中访问索引为1的Slot上。接下来再次执行“bipush”指令将数值8压入栈顶后，通过“istore_2”指令将栈顶元素出栈并存储在局部变量表中访问索引为2的Slot上。
“iload_1”和“iload_2”指令会负责将局部变量表中访问索引为1和2的Slot上的数值15和8重新压入操作数栈的栈顶，紧接着“iadd”指令便会将这2个数值出栈执行加法运算后再将运算结果重新压入栈顶，
“istore_3”指令会将运算结果出栈并存储在局部变量表中访问索引为3的Slot上。最后“return”指令的作用就是方法执行完成之后的返回操作。在操作数栈中，一项运算通常由多个子运算（subcomputation）嵌套进行，一个子运算过程的结果可以被其他外围运算所使用。



运行时栈帧结构
栈帧（Stack Frame） 是用于虚拟机执行时方法调用和方法执行时的数据结构，它是虚拟栈数据区的组成元素。每一个方法从调用到方法返回都对应着一个栈帧入栈出栈的过程。

try-catch-finally异常处理
1. 如果try语句块中出现属于Exception或其子类的异常，转到catch语句块处理
2. 如果try语句块中出现不属于Exception或其子类的异常，转到finally语句块处理
3. 如果catch语句块中出现任何异常，转到finally语句块处理

// todo  读屏障和写屏障



有栈协程与无栈协程：https://blog.csdn.net/weixin_43705457/article/details/106924435


synchronized关键字同步过程：
synchronized经过javac编译后，会在同步块的前后分别形成monitorenter和monitorexit这两个字节码指令。
这两个字节码都需要一个reference类型的参数来指明要锁定和解锁的对象。如果源码中的synchronized明确指定了对象参数，那就以这个对象的引用作为reference;如果没有明确指定，那将根据synchronized修饰的方法类型(如实例方法或类方法)，来决定是取代码所在的对象实例还是去类型对应的Class对象来作为线程要持有的锁

在执行monitorenter指令时，首先要去尝试获取对象的锁。如果这个对象没有被锁定，或者当前线程已经持有那个对象的锁，就把锁的计数器值增加1，
而在执行monitorexit指令会将锁计数器的值减1。一旦计数器的值为0，锁随即就释放了。如果获取对象锁失败，那当前线程就应当被阻塞等待，直到请求锁定的对象被持有它的线程释放为止





















