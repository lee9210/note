开销
当CPU从执行一个线程切换到执行另外一个线程的时候，它需要先存储当前线程的本地的数据，程序指针等，然后载入另一个线程的本地数据，程序指针等，最后才开始执行。
这种切换称为“上下文切换”。CPU会在一个上下文中执行一个线程，然后切换到另外一个上下文中执行另外一个线程。

线程的创建还需要申请内存，即使什么都不做，这些内存在线程运行结束之前，都不会释放。

并发编程模型
1. 并行工作者：传入的作业会被分配到不同的工作者上，每个工作者完成整个任务。工作者们并行运作在不同的线程上，甚至可能在不同的CPU上。
图示：concurrency-models-1.png

如果在某个汽车厂里实现了并行工作者模型，每台车都会由一个工人来生产。工人们将拿到汽车的生产规格，并且从头到尾负责所有工作。

优点:你只需添加更多的工作者来提高系统的并行度。
缺点：
1. 共享状态可能会很复杂。共享的工作者经常需要访问一些共享数据，无论是内存中的或者共享的数据库中的。图示：concurrency-models-2.png
	一旦共享状态潜入到并行工作者模型中，将会使情况变得复杂起来。线程需要以某种方式存取共享数据，以确保某个线程的修改能够对其他线程可见（数据修改需要同步到主存中，不仅仅将数据保存在执行这个线程的CPU的缓存中）。
	线程需要避免竟态，死锁以及很多其他共享状态的并发性问题。